/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AIInferenceMarketplaceInterface extends utils.Interface {
  functions: {
    "calculatePayment(address,uint256)": FunctionFragment;
    "completeInference(uint256)": FunctionFragment;
    "getOperatorDetails(address)": FunctionFragment;
    "operators(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "platformFee()": FunctionFragment;
    "platformFeeBalance(address)": FunctionFragment;
    "registerOperator(uint256,uint256,string)": FunctionFragment;
    "requestCounts(address)": FunctionFragment;
    "requestInference(address,uint256)": FunctionFragment;
    "requests(address,uint256)": FunctionFragment;
    "totalTransactions()": FunctionFragment;
    "totalVolume()": FunctionFragment;
    "updateOperator(uint256,uint256,string,bool)": FunctionFragment;
    "updatePlatformFee(uint256)": FunctionFragment;
    "users(address)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculatePayment"
      | "completeInference"
      | "getOperatorDetails"
      | "operators"
      | "owner"
      | "platformFee"
      | "platformFeeBalance"
      | "registerOperator"
      | "requestCounts"
      | "requestInference"
      | "requests"
      | "totalTransactions"
      | "totalVolume"
      | "updateOperator"
      | "updatePlatformFee"
      | "users"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculatePayment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeInference",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorDetails",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestInference",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeInference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestInference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "FundsWithdrawn(address,uint256)": EventFragment;
    "InferenceCompleted(address,uint256,uint256)": EventFragment;
    "InferenceRequested(address,address,uint256,uint256)": EventFragment;
    "OperatorRegistered(address,string)": EventFragment;
    "OperatorUpdated(address,string)": EventFragment;
    "PlatformFeeUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InferenceCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InferenceRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeUpdated"): EventFragment;
}

export interface FundsWithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface InferenceCompletedEventObject {
  operator: string;
  requestId: BigNumber;
  payment: BigNumber;
}
export type InferenceCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  InferenceCompletedEventObject
>;

export type InferenceCompletedEventFilter =
  TypedEventFilter<InferenceCompletedEvent>;

export interface InferenceRequestedEventObject {
  user: string;
  operator: string;
  requestId: BigNumber;
  payment: BigNumber;
}
export type InferenceRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  InferenceRequestedEventObject
>;

export type InferenceRequestedEventFilter =
  TypedEventFilter<InferenceRequestedEvent>;

export interface OperatorRegisteredEventObject {
  operator: string;
  modelDetails: string;
}
export type OperatorRegisteredEvent = TypedEvent<
  [string, string],
  OperatorRegisteredEventObject
>;

export type OperatorRegisteredEventFilter =
  TypedEventFilter<OperatorRegisteredEvent>;

export interface OperatorUpdatedEventObject {
  operator: string;
  modelDetails: string;
}
export type OperatorUpdatedEvent = TypedEvent<
  [string, string],
  OperatorUpdatedEventObject
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export interface PlatformFeeUpdatedEventObject {
  newFee: BigNumber;
}
export type PlatformFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  PlatformFeeUpdatedEventObject
>;

export type PlatformFeeUpdatedEventFilter =
  TypedEventFilter<PlatformFeeUpdatedEvent>;

export interface AIInferenceMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AIInferenceMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculatePayment(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completeInference(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOperatorDetails(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        isRegistered: boolean;
        totalEarnings: BigNumber;
        availableBalance: BigNumber;
        completedTasks: BigNumber;
        minimumPayment: BigNumber;
        costPerToken: BigNumber;
        modelDetails: string;
        isActive: boolean;
      }
    >;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        isRegistered: boolean;
        totalEarnings: BigNumber;
        availableBalance: BigNumber;
        completedTasks: BigNumber;
        minimumPayment: BigNumber;
        costPerToken: BigNumber;
        modelDetails: string;
        isActive: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    platformFeeBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestInference(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        user: string;
        tokenCount: BigNumber;
        payment: BigNumber;
        timestamp: BigNumber;
        completed: boolean;
      }
    >;

    totalTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePlatformFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalSpent: BigNumber;
        totalRequests: BigNumber;
        lastInteraction: BigNumber;
      }
    >;

    withdrawFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  calculatePayment(
    _operator: string,
    _tokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeInference(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOperatorDetails(
    _operator: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      isRegistered: boolean;
      totalEarnings: BigNumber;
      availableBalance: BigNumber;
      completedTasks: BigNumber;
      minimumPayment: BigNumber;
      costPerToken: BigNumber;
      modelDetails: string;
      isActive: boolean;
    }
  >;

  operators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      isRegistered: boolean;
      totalEarnings: BigNumber;
      availableBalance: BigNumber;
      completedTasks: BigNumber;
      minimumPayment: BigNumber;
      costPerToken: BigNumber;
      modelDetails: string;
      isActive: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  platformFee(overrides?: CallOverrides): Promise<BigNumber>;

  platformFeeBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerOperator(
    _minimumPayment: BigNumberish,
    _costPerToken: BigNumberish,
    _modelDetails: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  requestInference(
    _operator: string,
    _tokenCount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  requests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean] & {
      user: string;
      tokenCount: BigNumber;
      payment: BigNumber;
      timestamp: BigNumber;
      completed: boolean;
    }
  >;

  totalTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

  updateOperator(
    _minimumPayment: BigNumberish,
    _costPerToken: BigNumberish,
    _modelDetails: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePlatformFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalSpent: BigNumber;
      totalRequests: BigNumber;
      lastInteraction: BigNumber;
    }
  >;

  withdrawFunds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculatePayment(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeInference(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOperatorDetails(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        isRegistered: boolean;
        totalEarnings: BigNumber;
        availableBalance: BigNumber;
        completedTasks: BigNumber;
        minimumPayment: BigNumber;
        costPerToken: BigNumber;
        modelDetails: string;
        isActive: boolean;
      }
    >;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        isRegistered: boolean;
        totalEarnings: BigNumber;
        availableBalance: BigNumber;
        completedTasks: BigNumber;
        minimumPayment: BigNumber;
        costPerToken: BigNumber;
        modelDetails: string;
        isActive: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeeBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestInference(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        user: string;
        tokenCount: BigNumber;
        payment: BigNumber;
        timestamp: BigNumber;
        completed: boolean;
      }
    >;

    totalTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    updateOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformFee(
      _newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalSpent: BigNumber;
        totalRequests: BigNumber;
        lastInteraction: BigNumber;
      }
    >;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FundsWithdrawn(address,uint256)"(
      account?: string | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      account?: string | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "InferenceCompleted(address,uint256,uint256)"(
      operator?: string | null,
      requestId?: null,
      payment?: null
    ): InferenceCompletedEventFilter;
    InferenceCompleted(
      operator?: string | null,
      requestId?: null,
      payment?: null
    ): InferenceCompletedEventFilter;

    "InferenceRequested(address,address,uint256,uint256)"(
      user?: string | null,
      operator?: string | null,
      requestId?: null,
      payment?: null
    ): InferenceRequestedEventFilter;
    InferenceRequested(
      user?: string | null,
      operator?: string | null,
      requestId?: null,
      payment?: null
    ): InferenceRequestedEventFilter;

    "OperatorRegistered(address,string)"(
      operator?: string | null,
      modelDetails?: null
    ): OperatorRegisteredEventFilter;
    OperatorRegistered(
      operator?: string | null,
      modelDetails?: null
    ): OperatorRegisteredEventFilter;

    "OperatorUpdated(address,string)"(
      operator?: string | null,
      modelDetails?: null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(
      operator?: string | null,
      modelDetails?: null
    ): OperatorUpdatedEventFilter;

    "PlatformFeeUpdated(uint256)"(newFee?: null): PlatformFeeUpdatedEventFilter;
    PlatformFeeUpdated(newFee?: null): PlatformFeeUpdatedEventFilter;
  };

  estimateGas: {
    calculatePayment(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeInference(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOperatorDetails(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeeBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestInference(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    updateOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePlatformFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePayment(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeInference(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOperatorDetails(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFeeBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestInference(
      _operator: string,
      _tokenCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateOperator(
      _minimumPayment: BigNumberish,
      _costPerToken: BigNumberish,
      _modelDetails: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePlatformFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
